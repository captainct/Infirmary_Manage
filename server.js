console.log("LOADED SERVER FILE");
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà
const express = require("express");
const mysql = require("mysql2/promise");
const path = require("path");
const app = express();
const PORT = 3000;

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏î‡πâ
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå static ‡∏à‡∏≤‡∏Å public folder
app.use(express.static(path.join(__dirname, "public")));

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const dbConfig = {
  host: "localhost",
  user: "root",
  password: "",
  database: "workplace_infirmary_center",
};

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function connectDB() {
  try {
    const connection = await mysql.createConnection(dbConfig);
    console.log("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    return connection;
  } catch (error) {
    console.log("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error.message);
    return null;
  }
}

// ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
app.get("/", (req, res) => {
  res.send(`
        <h1>üè• ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å</h1>
        <p>Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}</p>
        <h3>‡∏ó‡∏î‡∏™‡∏≠‡∏ö API:</h3>
        <ul>
            <li><a href="/api/test">üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö</a></li>
            <li><a href="/api/patients">üè• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</a></li>
            <li><a href="/api/check-table">üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á patients</a></li>
            <li><a href="/api/examinations">üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤</a></li>
        </ul>
        <h3>‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö:</h3>
        <ul>
            <li><a href="/patients.html">üë• ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</a></li>
            <li><a href="/examination.html">üè• ‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à</a></li>
            <li><a href="/patients_list.html">üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</a></li>
        </ul>
    `);
});

// API ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
app.get("/api/test", (req, res) => {
  res.json({
    message: "API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥",
    timestamp: new Date().toISOString(),
    status: "success",
  });
});

// API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á patients
app.get("/api/check-table", async (req, res) => {
  const connection = await connectDB();

  if (!connection) {
    return res.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }

  try {
    const [columns] = await connection.execute("DESCRIBE patients");

    res.json({
      message: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á patients",
      columns: columns.map((col) => ({
        field: col.Field,
        type: col.Type,
        null: col.Null,
        key: col.Key,
        default: col.Default,
      })),
    });

    await connection.end();
  } catch (error) {
    res.json({ error: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message });
    await connection.end();
  }
});

// API ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
app.get("/api/patients", async (req, res) => {
  const connection = await connectDB();

  if (!connection) {
    return res.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }

  try {
    const [rows] = await connection.execute(`
            SELECT * FROM patients 
            ORDER BY created_at DESC
        `);

    res.json({
      message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: rows.length,
      data: rows,
    });

    await connection.end();
  } catch (error) {
    res.json({ error: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message });
    await connection.end();
  }
});

// API ‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
app.post("/api/patients", async (req, res) => {
  const connection = await connectDB();

  if (!connection) {
    return res.json({
      success: false,
      error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
    });
  }

  try {
    const {
      employee_id,
      department,
      first_name,
      last_name,
      gender,
      phone,
      weight,
      height,
      allergies,
    } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!employee_id || employee_id.trim() === "") {
      return res.json({
        success: false,
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
      });
    }

    if (!department || department.trim() === "") {
      return res.json({
        success: false,
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å",
      });
    }

    if (!first_name || first_name.trim() === "") {
      return res.json({
        success: false,
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠",
      });
    }

    if (!last_name || last_name.trim() === "") {
      return res.json({
        success: false,
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
      });
    }

    if (!gender || gender.trim() === "") {
      return res.json({
        success: false,
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®",
      });
    }

    if (!phone || phone.trim() === "") {
      return res.json({
        success: false,
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
      });
    }

    if (
      weight &&
      (isNaN(parseFloat(weight)) ||
        parseFloat(weight) < 1 ||
        parseFloat(weight) > 300)
    ) {
      return res.json({
        success: false,
        error: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-300 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°",
      });
    }

    if (
      height &&
      (isNaN(parseFloat(height)) ||
        parseFloat(height) < 50 ||
        parseFloat(height) > 250)
    ) {
      return res.json({
        success: false,
        error: "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 50-250 ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£",
      });
    }

    // SQL Query
    const sql = `
      INSERT INTO patients (
        employee_id, department, first_name, last_name, gender, phone, 
        weight, height, allergies, visit_date, created_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURDATE(), NOW())
    `;

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const values = [
      employee_id.trim(),
      department.trim(),
      first_name.trim(),
      last_name.trim(),
      gender.trim(),
      phone.trim(),
      weight ? parseFloat(weight) : null,
      height ? parseFloat(height) : null,
      allergies || null,
    ];

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [result] = await connection.execute(sql, values);

    //‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const [newPatient] = await connection.execute(
      "SELECT * FROM patients WHERE id = ?",
      [result.insertId]
    );

    await connection.end();

    res.json({
      success: true,
      message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      patient_id: result.insertId,
      patient_data: newPatient[0],
      redirect_to_examination: true,
      data: {
        ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: employee_id.trim(),
        ‡πÅ‡∏ú‡∏ô‡∏Å: department.trim(),
        ‡∏ä‡∏∑‡πà‡∏≠: `${first_name.trim()} ${last_name.trim()}`,
        ‡πÄ‡∏û‡∏®: gender === "male" ? "‡∏ä‡∏≤‡∏¢" : "‡∏´‡∏ç‡∏¥‡∏á",
        ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: phone.trim(),
        ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: weight ? `${weight} ‡∏Å‡∏Å.` : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏",
        ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á: height ? `${height} ‡∏ã‡∏°.` : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏",
        ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏û‡πâ‡∏¢‡∏≤: allergies || "‡πÑ‡∏°‡πà‡∏°‡∏µ",
        ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: new Date().toLocaleString("th-TH"),
      },
    });
  } catch (error) {
    console.log("Error saving patient:", error);
    await connection.end();

    res.json({
      success: false,
      error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + error.message,
    });
  }
});

//API ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤
app.post("/api/examinations", async (req, res) => {
  const connection = await connectDB();
  if (!connection) {
    return res.json({
      success: false,
      error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
    });
  }

  try {
    const {
      patient_id,
      service_type,
      treatment_details,
      patient_status,
      observation_notes,
      patient_signature,
      staff_signature,
      staff_name,
      medicines,
      attached_photo,
    } = req.body;

    if (!patient_id || !service_type) {
      return res.json({ success: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô" });
    }

    await connection.beginTransaction();

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤
    const visitDateTime = new Date();
    const visit_date = visitDateTime.toISOString().split("T")[0];
    const visit_time = visitDateTime.toTimeString().split(" ")[0];

    const [examResult] = await connection.execute(
      `
      INSERT INTO examinations (
        patient_id, visit_date, visit_time, service_type, treatment_details,
        patient_status, observation_notes, patient_signature, staff_signature,
        staff_name, attached_photo, total_cost
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0)
    `,
      [
        patient_id,
        visit_date,
        visit_time,
        service_type,
        treatment_details || null,
        patient_status || "discharged",
        observation_notes || null,
        patient_signature || null,
        staff_signature || null,
        staff_name || null,
        attached_photo || null,
      ]
    );

    const examination_id = examResult.insertId;
    let total_cost = 0;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤
    if (medicines && medicines.length > 0) {
      for (const med of medicines) {
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        const unit_price = med.unit_price || 0;
        const subtotal = unit_price * med.quantity;
        total_cost += subtotal;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤
        await connection.execute(
          `
          INSERT INTO medicine_dispensed 
          (examination_id, medicine_id, quantity, unit_price, subtotal)
          VALUES (?, ?, ?, ?, ?)
        `,
          [
            examination_id,
            med.medicine_id || 0,
            med.quantity,
            unit_price,
            subtotal,
          ]
        );
      }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó totalcost
    await connection.execute(
      "UPDATE examinations SET total_cost = ? WHERE id = ?",
      [total_cost, examination_id]
    );

    await connection.commit();
    await connection.end();

    res.json({
      success: true,
      message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      examination_id: examination_id,
      total_cost: total_cost,
    });
  } catch (error) {
    await connection.rollback();
    await connection.end();
    res.json({ success: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message });
  }
});

//API ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤
app.get("/api/examinations", async (req, res) => {
  const connection = await connectDB();
  if (!connection) {
    return res.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }

  try {
    const [examinations] = await connection.execute(`
      SELECT 
        e.*,
        CONCAT(p.first_name, ' ', p.last_name) as patient_name,
        p.employee_id, p.department
      FROM examinations e
      JOIN patients p ON e.patient_id = p.id
      ORDER BY e.created_at DESC
    `);

    res.json({
      message: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      count: examinations.length,
      data: examinations,
    });

    await connection.end();
  } catch (error) {
    res.json({ error: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message });
    await connection.end();
  }
});

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå HTML
app.get("/patients", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "patients.html"));
});

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à
app.get("/examination", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "examination.html"));
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Server
app.listen(PORT, () => {
  console.log(`Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
  console.log(`‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:${PORT}`);
  console.log(`‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: http://localhost:${PORT}/patients.html`);
  console.log(`‡∏´‡∏ô‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à: http://localhost:${PORT}/examination.html`);
  console.log(`‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: http://localhost:${PORT}/patients_list.html`);
  console.log(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: http://localhost:${PORT}/api/patients`);
  console.log(`‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à: http://localhost:${PORT}/api/examinations`);
});
